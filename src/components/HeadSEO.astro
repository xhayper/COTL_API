---
import { SITE, OPEN_GRAPH, TWITTER, SIDEBAR, type Frontmatter } from "../config";
import type { BreadcrumbList } from "schema-dts";
import { SEO } from "astro-seo";

export interface Props {
    frontmatter: Frontmatter;
    canonicalUrl: URL;
}
const { frontmatter, canonicalUrl } = Astro.props as Props;

const formattedContentTitle = frontmatter.title ? `${frontmatter.title} ðŸš€ ${SITE.title}` : SITE.title;
const imageSrc = frontmatter.image?.src ?? OPEN_GRAPH.image.src;
const canonicalImageSrc = new URL(imageSrc, Astro.site);
const imageAlt = frontmatter.image?.alt ?? OPEN_GRAPH.image.alt;

const sidebar: { text: string; link: string }[] = SIDEBAR === undefined ? [] : Object.values(SIDEBAR).flat(1);

const jsonld = JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    name: "Documentation",
    itemListElement: sidebar.map((item, index) => ({
        "@type": "ListItem",
        name: item.text,
        position: index + 1,
        item: new URL(item.link, Astro.site).toString()
    }))
} as BreadcrumbList);
---

<SEO
    title={formattedContentTitle}
    description={frontmatter.description ? frontmatter.description : SITE.description}
    canonical={canonicalUrl.toString()}
    noindex={false}
    nofollow={false}
    openGraph={{
        basic: {
            title: formattedContentTitle,
            type: "article",
            image: canonicalImageSrc.toString(),
            url: canonicalUrl.toString()
        },
        optional: {
            description: frontmatter.description ? frontmatter.description : SITE.description,
            locale: SITE.defaultLanguage,
            siteName: SITE.title
        },
        image: {
            url: canonicalImageSrc.toString(),
            secureUrl: frontmatter.image ? "" : OPEN_GRAPH.image.secure_url ?? "",
            type: frontmatter.image ? "" : OPEN_GRAPH.image.type ?? "",
            width: frontmatter.image ? 0 : OPEN_GRAPH.image.width ?? 0,
            height: frontmatter.image ? 0 : OPEN_GRAPH.image.height ?? 0,
            alt: imageAlt
        }
    }}
    twitter={{
        card: TWITTER.card ?? "",
        site: TWITTER.site ?? "",
        creator: TWITTER.creator ?? ""
    }}
    extend={{
        meta: [
            { name: "twitter:title", content: formattedContentTitle },
            {
                name: "twitter:description",
                content: frontmatter.description ? frontmatter.description : SITE.description
            },
            {
                name: "twitter:image",
                content: canonicalImageSrc.toString()
            },
            {
                name: "twitter:image:alt",
                content: imageAlt
            },
            { name: "theme-color", content: "#CD2524" }
        ]
    }}
/>

<script type="application/ld+json" set:html={jsonld}></script>
