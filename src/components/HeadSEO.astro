---
import { SITE, OPEN_GRAPH, TWITTER, Frontmatter } from "../config";
import { SEO } from "astro-seo";

export interface Props {
    frontmatter: Frontmatter;
    canonicalUrl: URL;
}
const { frontmatter, canonicalUrl } = Astro.props as Props;

const formattedContentTitle = `${frontmatter.title} ðŸš€ ${SITE.title}`;
const imageSrc = frontmatter.image?.src ?? OPEN_GRAPH.image.src;
const canonicalImageSrc = new URL(imageSrc, Astro.site);
const imageAlt = frontmatter.image?.alt ?? OPEN_GRAPH.image.alt;
---

<SEO
    title={formattedContentTitle}
    description={frontmatter.description ? frontmatter.description : SITE.description}
    canonical={canonicalUrl.toString()}
    noindex={false}
    nofollow={false}
    openGraph={{
        basic: {
            title: formattedContentTitle,
            type: "article",
            image: canonicalImageSrc.toString(),
            url: canonicalUrl.toString()
        },
        optional: {
            description: frontmatter.description ? frontmatter.description : SITE.description,
            locale: SITE.defaultLanguage,
            siteName: formattedContentTitle
        },
        image: {
            url: canonicalImageSrc.toString(),
            type: frontmatter.image ? "" : OPEN_GRAPH.image.mimeType ?? "",
            width: frontmatter.image ? 0 : OPEN_GRAPH.image.width ?? 0,
            height: frontmatter.image ? 0 : OPEN_GRAPH.image.height ?? 0,
            alt: imageAlt
        }
    }}
    twitter={{
        card: TWITTER.card ?? "",
        site: TWITTER.site ?? "",
        creator: TWITTER.creator ?? ""
    }}
    extend={{
        meta: [
            { name: "twitter:title", content: formattedContentTitle },
            {
                name: "twitter:description",
                content: frontmatter.description ? frontmatter.description : SITE.description
            },
            {
                name: "twitter:image",
                content: canonicalImageSrc.toString()
            },
            {
                name: "twitter:image:alt",
                content: imageAlt
            },
            { name: "theme-color", content: "#CD2524" }
        ]
    }}
/>

<!--
  TODO: Add json+ld data, maybe https://schema.org/APIReference makes sense?
  Docs: https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data
  https://www.npmjs.com/package/schema-dts seems like a great resource for implementing this.
  Even better, there's a React component that integrates with `schema-dts`: https://github.com/google/react-schemaorg
-->
