---
import { SITE, SEO as SiteSEOData } from "../config";
import { SEO } from "astro-seo";

export interface Props {
    frontmatter: any;
    site: any;
    canonicalURL: URL | string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const { frontmatter = {} } = Astro.props;
const formattedContentTitle = frontmatter.title ? `${frontmatter.title} ðŸš€ ${SITE.title}` : SITE.title;
const imageSrc = frontmatter?.image?.src ?? SiteSEOData.opengraph.image.src;
const canonicalImageSrc = new URL(imageSrc, Astro.site);
const imageAlt = frontmatter?.image?.alt ?? SiteSEOData.opengraph.image.alt;
---

<SEO
    title={formattedContentTitle}
    description={frontmatter.description ? frontmatter.description : SITE.description}
    canonical={canonicalURL.toString()}
    noindex={false}
    nofollow={false}
    openGraph={{
        basic: {
            title: SITE.title,
            type: "article",
            image: canonicalImageSrc.toString(),
            url: canonicalURL.toString()
        },
        optional: {
            description: SITE.description,
            locale: "en-us",
            siteName: SITE.title
        },
        image: {
            url: canonicalImageSrc.toString(),
            type: SiteSEOData.opengraph.image.mimeType ?? "",
            width: SiteSEOData.opengraph.image.width ?? 0,
            height: SiteSEOData.opengraph.image.height ?? 0,
            alt: imageAlt
        }
    }}
    twitter={{
        card: SiteSEOData.twitter.card ?? "",
        site: SiteSEOData.twitter.site ?? "",
        creator: SiteSEOData.twitter.creator ?? ""
    }}
    extend={{
        meta: [
            { name: "twitter:title", content: SITE.title },
            {
                name: "twitter:description",
                content: SITE.description
            },
            {
                name: "twitter:image",
                content: canonicalImageSrc.toString()
            },
            {
                name: "twitter:image:alt",
                content: imageAlt
            },
            { name: "theme-color", content: "#CD2524" }
        ]
    }}
/>

<!--
  TODO: Add json+ld data, maybe https://schema.org/APIReference makes sense?
  Docs: https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data
  https://www.npmjs.com/package/schema-dts seems like a great resource for implementing this.
  Even better, there's a React component that integrates with `schema-dts`: https://github.com/google/react-schemaorg
-->
