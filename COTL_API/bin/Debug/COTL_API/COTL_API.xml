<?xml version="1.0"?>
<doc>
    <assembly>
        <name>COTL_API</name>
    </assembly>
    <members>
        <member name="F:COTL_API.CustomInventory.CustomInventoryItem.InternalObjectName">
            <summary>
            This is the name given to custom items when they are spawned into the world.
            </summary>
        </member>
        <member name="P:COTL_API.CustomInventory.CustomInventoryItem.Rarity">
            <summary>
            Defines rarity for offering shrine spawn chance.
            </summary>
        </member>
        <member name="P:COTL_API.CustomInventory.CustomInventoryItem.LocalScale">
            <summary>
            Defines the scale (size) of the object when spawned.
            </summary>
        </member>
        <member name="P:COTL_API.CustomInventory.CustomInventoryItem.AddItemToOfferingShrine">
            <summary>
            Defines whether to add the item to offering shrines.
            </summary>
        </member>
        <member name="P:COTL_API.CustomInventory.CustomInventoryItem.ItemPickUpToImitate">
            <summary>
            Defines the item properties (bounce, speed, magnet etc..) to imitate when spawned.
            </summary>
        </member>
        <member name="P:COTL_API.CustomInventory.CustomInventoryItem.AddItemToDungeonChests">
            <summary>
            Defines if the item should be added to dungeon chests.
            </summary>
        </member>
        <member name="P:COTL_API.CustomInventory.CustomInventoryItem.DungeonChestSpawnChance">
            <summary>
            The chance for the item to be spawned from dungeon chests. Keep in mind that the chance is affected by the current Dungeon luck modifier.
            </summary>
        </member>
        <member name="P:COTL_API.CustomInventory.CustomInventoryItem.DungeonChestMinAmount">
            <summary>
            The minimum amount of items to spawn from dungeon chests.
            </summary>
        </member>
        <member name="P:COTL_API.CustomInventory.CustomInventoryItem.DungeonChestMaxAmount">
            <summary>
            The maximum amount of items to spawn from dungeon chests.
            </summary>
        </member>
        <member name="T:COTL_API.CustomInventory.CustomItemManager.ItemRarity">
            <summary>
            Used to define an items rarity for the purpose of adding them to offering shrines.
            </summary>
        </member>
        <member name="M:COTL_API.CustomInventory.CustomItemManager.DropLoot(COTL_API.CustomInventory.CustomInventoryItem)">
            <summary>
            A method to return whether to drop loot or not based on the custom items chances to drop.
            </summary>
            <param name="customInventoryItem">The </param>
            <returns>Returns true/false based on the roll.</returns>
        </member>
        <member name="M:COTL_API.CustomInventory.CustomItemManager.GetItemObjectByInternalObjectName(System.String)">
            <summary>
            Used to retrieve the custom item from the custom item dictionary based on it's internal object name.
            </summary>
            <param name="name">Name of the items internal object to search for.</param>
            <returns>If found, returns the CustomInventoryItem object.</returns>
        </member>
        <member name="T:COTL_API.CustomInventory.CustomItemSpawnPatches">
            <summary>
            This class is used for patches required for the custom items to spawn.
            </summary>
        </member>
        <member name="M:COTL_API.CustomInventory.CustomItemSpawnPatches.InventoryItemDisplay_GetItemImages(InventoryItemDisplay@)">
            <summary>
               This patch adds our custom items to the list of images used for the offering shrine items
            </summary>
            <param name="__instance"></param>
        </member>
        <member name="T:COTL_API.CustomInventory.CustomItemSpawnPatches.StructuresOfferingShrineCompletePatches">
            <summary>
            This is a patch to add our custom items to the list of items that can be offered to the shrine.
            </summary>
        </member>
        <member name="M:COTL_API.CustomInventory.CustomItemSpawnPatches.StructuresOfferingShrineCompletePatches.Prefix(Structures_OfferingShrine@)">
            <summary>
               This is a patch to allow custom items to be used in the offering shrine based on the items rarity. If not overriden, default is common.
            </summary>
            <param name="__instance"></param>
        </member>
        <member name="T:COTL_API.CustomInventory.CustomItemSpawnPatches.DungeonChestPatches">
            <summary>
            Patches for the custom items to spawn in dungeon chests, if they are set to do so.
            </summary>
        </member>
        <member name="M:COTL_API.CustomInventory.CustomItemSpawnPatches.DungeonChestPatches.RevealPostfix(Interaction_Chest)">
            <summary>
            This is used to spawn the custom items in regular dungeon chests.
            </summary>
            <param name="__instance"></param>
        </member>
        <member name="M:COTL_API.CustomInventory.CustomItemSpawnPatches.DungeonChestPatches.RevealBossRewardPostfix(Interaction_Chest)">
            <summary>
            This is used to spawn the custom items in the boss room dungeon chest.
            </summary>
            <param name="__instance"></param>
        </member>
        <member name="T:COTL_API.CustomObjectives.CustomObjective">
            <summary>
            The custom objective class.
            </summary>
        </member>
        <member name="P:COTL_API.CustomObjectives.CustomObjective.InternalName">
            <summary>
            Internal name of the quest.
            </summary>
            <returns>The string</returns>
        </member>
        <member name="P:COTL_API.CustomObjectives.CustomObjective.InitialQuestText">
            <summary>
            This is the text that appears in the dialog when the follower is proposing the quest to the player.
            </summary>
            <returns>string</returns>
        </member>
        <member name="P:COTL_API.CustomObjectives.CustomObjective.ObjectiveData">
            <summary>
            This is where the custom objective is created and stored against the plugins ObjectiveKey in CustomObjectivesManager.
            </summary>
            <returns>ObjectivesData</returns>
        </member>
        <member name="P:COTL_API.CustomObjectives.CustomObjective.ObjectiveKey">
            <summary>
            This is the objectives unique key. It is used to store the objective in CustomObjectivesManager.
            </summary>
            <returns>Objectives.CustomQuestTypes</returns>
        </member>
        <member name="T:COTL_API.CustomObjectives.CustomObjectiveManager">
            <summary>
            The custom objective manager class.
            </summary>
        </member>
        <member name="P:COTL_API.CustomObjectives.CustomObjectiveManager.CustomObjectives">
            <summary>
            Holds the list of custom objectives.
            </summary>
        </member>
        <member name="P:COTL_API.CustomObjectives.CustomObjectiveManager.TrackedObjectives">
            <summary>
            Holds the list of instantiated custom objectives.
            </summary>
        </member>
        <member name="F:COTL_API.CustomObjectives.CustomObjectiveManager.GroupId">
            <summary>
            The group id
            </summary>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Add(COTL_API.CustomObjectives.CustomObjective)">
            <summary>
            Used to assign a unique id (ObjectiveKey) to each custom objective, and add the objective to the game.
            </summary>
            <param name="customObjective">The custom objective created by the plugins.</param>
            <returns>A tuple containing ObjectiveKey and ObjectiveData so they can be easily accessed by the plugin.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.AddQuests">
            <summary>
            Adds the custom objectives to the game.
            </summary>
        </member>
        <member name="T:COTL_API.CustomObjectives.CustomObjectiveManager.Objective">
            <summary>
            Houses the data for the custom objectives. Due to the quest ID being randomly generated by the game, and our only way to track, we need to ensure we're returning the original instance of the quest.
            </summary>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.BedRest(Objectives.CustomQuestTypes,System.String)">
             <summary>
             
             </summary>
             <param name="objectiveKey">Objectives unique key.</param>
             <param name="followerName">The name of the follower.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.BuildStructure(Objectives.CustomQuestTypes,StructureBrain.TYPES,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="structureType">The type of structure to build.</param>
            <param name="target">The target amount to complete the objective.</param>
            <param name="expireTimestamp">How long the player has to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.CollectItem(Objectives.CustomQuestTypes,InventoryItem.ITEM_TYPE,System.Int32,System.Boolean,FollowerLocation,System.Single)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="itemType">The target item to collect.</param>
            <param name="target">The target amount to complete the objective.</param>
            <param name="targetIsTotal">Include items you already have or start count from 0.</param>
            <param name="targetLocation">The location the objective takes place. i.e. Dungeon1_1</param>
            <param name="expireTimestamp">How long the player has to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.CookMeal(Objectives.CustomQuestTypes,InventoryItem.ITEM_TYPE,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="mealType">The type of meal that is to be cooked to complete the objective.</param>
            <param name="count">How many required to complete the objective.</param>
            <param name="expireTimestamp">How long the player has to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.Custom(Objectives.CustomQuestTypes,Objectives.CustomQuestTypes,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="customQuestType">The type of custom quest.</param>
            <param name="targetFollowerID">The target followers ID.</param>
            <param name="questExpireDuration">How long the player has to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.DefeatKnucklebones(Objectives.CustomQuestTypes,System.String,System.Single)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="characterNameTerm"></param>
            <param name="expireTimestamp">How long the player has to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.DepositFood(Objectives.CustomQuestTypes)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.EatMeal(Objectives.CustomQuestTypes,StructureBrain.TYPES,System.Single)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="mealType">The type of meal that is to be eaten to complete the objective.</param>
            <param name="questExpireDuration">How long the user has to complete.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.FindFollower(Objectives.CustomQuestTypes,FollowerLocation,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="targetLocation">The location that the objective takes place. i.e. Dungeon1_1</param>
            <param name="followerSkin">Specify what skin the follower has.</param>
            <param name="followerColour">Specify what colour the follower is.</param>
            <param name="followerVariant">Specify what variant of the follower.</param>
            <param name="targetFollowerName">The target followers name.</param>
            <param name="objectiveVariant"></param>
            <param name="expireTimestamp">How long the player has to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.KillEnemies(Objectives.CustomQuestTypes,Enemy,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="enemyType">The target enemy.</param>
            <param name="killsRequired">Kills required to complete.</param>
            <param name="questDuration">How long the user has to complete.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.NoCurses(Objectives.CustomQuestTypes,System.Int32)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="roomsRequired">How many rooms required with no curses to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.NoDamage(Objectives.CustomQuestTypes,System.Int32)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="roomsRequired">How many rooms required with no damage to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.NoDodge(Objectives.CustomQuestTypes,System.Int32)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="roomsRequired">How many rooms required with no dodging to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.NoHealing(Objectives.CustomQuestTypes,System.Int32)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="roomsRequired">How many rooms required with no healing to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.PerformRitual(Objectives.CustomQuestTypes,UpgradeSystem.Type,System.Int32,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="ritual">The type of ritual to perform.</param>
            <param name="targetFollowerID">The target follower ID.</param>
            <param name="requiredFollowers">How many followers are required.</param>
            <param name="questExpireDuration">How long the player has to complete the ritual.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.PlaceStructure(Objectives.CustomQuestTypes,StructureBrain.Categories,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="category">The category of structure to place.</param>
            <param name="target">The target amount to complete the objective.</param>
            <param name="expireDuration">How long the player has to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.RecruitCursedFollower(Objectives.CustomQuestTypes,Thought,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="cursedState">Set the curse the follower has.</param>
            <param name="target">The target amount to complete the objective.</param>
            <param name="expireTimestamp">How long the player has to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.RecruitFollower(Objectives.CustomQuestTypes,System.Int32)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="count">How many required to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.RemoveStructure(Objectives.CustomQuestTypes,StructureBrain.TYPES)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="structureType">The type of structure to remove.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.ShootDummy(Objectives.CustomQuestTypes)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.TalkToFollower(Objectives.CustomQuestTypes,System.String,System.Single)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="term"></param>
            <param name="expireTimestamp">How long the player has to complete the objective.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectiveManager.Objective.UnlockUpgrade(Objectives.CustomQuestTypes,UpgradeSystem.Type)">
            <summary>
            
            </summary>
            <param name="objectiveKey">Objectives unique key.</param>
            <param name="unlockType">The type of upgrade to unlock.</param>
            <returns>The original instance of the objective if it exists, otherwise returns a new instance.</returns>
        </member>
        <member name="T:COTL_API.CustomObjectives.CustomObjectivePatches">
            <summary>
            This class houses patches required for the Custom Objectives to function.
            </summary>
        </member>
        <member name="M:COTL_API.CustomObjectives.CustomObjectivePatches.GetConversationEntry(Follower.ComplaintType,ObjectivesData,System.Collections.Generic.List{MMTools.ConversationEntry}@)">
            <summary>
            This overrides the text the follower "barks" at you when it's asking you to do something.
            </summary>
            <param name="ComplaintForBark">The type of complaint. We're only interested in the GiveQuest complaint.</param>
            <param name="objective">The objective of the complaint.</param>
            <param name="__result">The list of conversation entries. This is only ever 1 with standard quests.</param>
        </member>
        <member name="T:COTL_API.Helpers.ItemPickUp">
            <summary>
            List of defined items from the game. Used to retrieve the game objects prefab object.
            </summary>
        </member>
        <member name="M:COTL_API.Helpers.ItemPickUp.GetItemPickUpObject(InventoryItem.ITEM_TYPE)">
            <summary>
            Returns a GameObject of the specified item type (if it exists). Will return a gold coin if the item type is not found.
            </summary>
            <param name="type">The type of item to return.</param>
            <returns>The specified item as a game object.</returns>
        </member>
    </members>
</doc>
